var search_data = {"index":{"searchIndex":["args","button","command","home","input","login","page","results","runner","search","session","stats","table","text","window","add_business_days()","append()","button()","cancel()","checker_input()","clear_input()","click_by()","click_item()","content_displayed?()","custom()","description()","displayed?()","displayed?()","download()","end_test()","execute()","execute()","execute()","execute_files()","expect()","fail()","failure()","find_and_screenshot()","find_elem()","find_failure_rate()","format_to_new_ine()","get_action()","get_current_results_dir()","get_driver()","get_failure_rate()","get_files()","get_params()","get_results_directory()","get_stats_directory()","get_test_stats()","get_var()","go_back()","go_to()","home()","id_present?()","info()","initialise_test_script()","input()","log()","log_action()","login()","login()","logout()","logout()","menu()","menu()","menu_input()","menu_item()","mkdir()","navbar_brand()","navbar_date()","navbar_text()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_button()","new_user()","order()","parse_command()","previous()","print()","record_failure_rates()","refresh_page()","reset()","reset_form()","run_script()","save_id()","screenshot()","scroll_to()","select2_input()","set_date()","set_report_file()","set_time()","set_var()","sleep_for()","smart_split()","subtract_business_days()","success()","switch_to()","table_wait()","terminate()","text_input()","user_menu()","user_menu()","user_menu_item()","wait_for_stale()","wait_until()","write()"],"longSearchIndex":["args","button","command","home","input","login","page","results","runner","search","session","stats","table","text","window","session#add_business_days()","results#append()","command#button()","button#cancel()","input#checker_input()","input#clear_input()","page#click_by()","table#click_item()","table#content_displayed?()","button#custom()","command#description()","button#displayed?()","text#displayed?()","button#download()","results#end_test()","command#execute()","runner#execute()","search#execute()","runner#execute_files()","command#expect()","results#fail()","results#failure()","results#find_and_screenshot()","command#find_elem()","stats#find_failure_rate()","results#format_to_new_ine()","runner#get_action()","results#get_current_results_dir()","args#get_driver()","stats#get_failure_rate()","args#get_files()","runner#get_params()","args#get_results_directory()","args#get_stats_directory()","runner#get_test_stats()","command#get_var()","page#go_back()","page#go_to()","page#home()","page#id_present?()","results#info()","command#initialise_test_script()","command#input()","results#log()","results#log_action()","command#login()","login#login()","command#logout()","login#logout()","command#menu()","page#menu()","input#menu_input()","page#menu_item()","results#mkdir()","page#navbar_brand()","page#navbar_date()","page#navbar_text()","button::new()","command::new()","home::new()","input::new()","login::new()","page::new()","results::new()","runner::new()","search::new()","session::new()","stats::new()","table::new()","text::new()","window::new()","button#new_button()","button#new_user()","button#order()","runner#parse_command()","page#previous()","results#print()","stats#record_failure_rates()","command#refresh_page()","session#reset()","session#reset_form()","runner#run_script()","page#save_id()","results#screenshot()","page#scroll_to()","input#select2_input()","session#set_date()","command#set_report_file()","session#set_time()","command#set_var()","session#sleep_for()","page#smart_split()","session#subtract_business_days()","results#success()","window#switch_to()","session#table_wait()","session#terminate()","input#text_input()","command#user_menu()","page#user_menu()","page#user_menu_item()","session#wait_for_stale()","session#wait_until()","results#write()"],"info":[["Args","","Args.html","","<p>Args - Formats and returns user input arguments appropriately. Author: Nevin Jojo\n"],["Button","","Button.html","","<p>Handles the button functions in the testing framework. Each function in the Button object is a call to …\n"],["Command","","Command.html","",""],["Home","","Home.html","","<p>Home class inherits the qualities of the page class\n"],["Input","","Input.html","","<p>Handles the input functions in the testing framework. Each function in the Inout object is a call to …\n"],["Login","","Login.html","","<p>Handles the login for the system(s). The login and logout methods uses the WebDriver to input login detail …\n"],["Page","","Page.html","","<p>Elements that\n"],["Results","","Results.html","","<p>Handles the test script result reporting feature of the framework.\n"],["Runner","","Runner.html","",""],["Search","","Search.html","","<p>Handles the search element in the system to search for values in the table.\n"],["Session","","Session.html","","<p>Handles the sessions and the values required for each session\n"],["Stats","","Stats.html","","<p>Handles the statistics behind each execution of the testing framework.\n"],["Table","","Table.html","","<p>Handles the table element testing functions.\n"],["Text","","Text.html","","<p>Handles the text elements om web pages.\n"],["Window","","Window.html","",""],["add_business_days","Session","Session.html#method-i-add_business_days","(date, num)","<p>Adds a specific number of days to a date (ignoring weekends) and returns it\n"],["append","Results","Results.html#method-i-append","(message)","<p>Appends to the end of the file and console. @param [String] message\n"],["button","Command","Command.html#method-i-button","()","<p>Calls the appropriate function within the Button /class to click on a particular button\n"],["cancel","Button","Button.html#method-i-cancel","()","<p>Finds and clicks on the cancel button present on the webpage.\n"],["checker_input","Input","Input.html#method-i-checker_input","()","<p>Finds and clicks on the checker field on the page to check/uncheck an item, based on its id. If option …\n"],["clear_input","Input","Input.html#method-i-clear_input","()","<p>Finds an Input element and clears its content.\n"],["click_by","Page","Page.html#method-i-click_by","(params)","<p>Clicks on the first element found by one of several search criteria. The element to be clicked could …\n"],["click_item","Table","Table.html#method-i-click_item","()","<p>Clicks on an element in a particular column based on it&#39;s value\n<p>Step 1: Find table in the webpage …\n"],["content_displayed?","Table","Table.html#method-i-content_displayed-3F","()","<p>Returns a true /if a button with a particular id is displayed, and vice-versa.\n"],["custom","Button","Button.html#method-i-custom","()","<p>Clicks on a custom button with a custom id that begins with `btn-`. If the button with the id provided …\n"],["description","Command","Command.html#method-i-description","()","<p>Description records the purpose of each test.\n"],["displayed?","Button","Button.html#method-i-displayed-3F","(id)","<p>Returns a true /if a button with a particular id is displayed, and vice-versa. @param [Object] id - id …\n"],["displayed?","Text","Text.html#method-i-displayed-3F","(params)",""],["download","Button","Button.html#method-i-download","()","<p>Clicks 0n the download button present on the webpage.\n"],["end_test","Results","Results.html#method-i-end_test","()","<p>Adds an end tag to the end of the file\n"],["execute","Command","Command.html#method-i-execute","()",""],["execute","Runner","Runner.html#method-i-execute","()","<p>Main method that triggers the framework to run every script specified by the user. Once the runner completes …\n"],["execute","Search","Search.html#method-i-execute","()",""],["execute_files","Runner","Runner.html#method-i-execute_files","()","<p>Execute test script file(s) in the files array. A new results file with the same name is created (with …\n"],["expect","Command","Command.html#method-i-expect","()","<p>Checks /if the test assumption made by the tester matches with the result of the tests.\n"],["fail","Results","Results.html#method-i-fail","(action, exception = nil)","<p>Increment failure count, take screenshot and report failure\n"],["failure","Results","Results.html#method-i-failure","(exception = nil)","<p>Prints failure to the end of the log.\n"],["find_and_screenshot","Results","Results.html#method-i-find_and_screenshot","(params)","<p>Finds element looking for and screenshot it Note: This is an action that was specifically made for handling …\n"],["find_elem","Command","Command.html#method-i-find_elem","()","<p>Finds either a specific button, item, textH1 element. If the element is unknown, it is ignored.\n"],["find_failure_rate","Stats","Stats.html#method-i-find_failure_rate","(filename)","<p>Looks for lines in the file that checks for test name test stats and return them (if any).\n"],["format_to_new_ine","Results","Results.html#method-i-format_to_new_ine","()","<p>Sets the writer and logger objects to have a formatter that includes n in the beginning of the line. …\n"],["get_action","Runner","Runner.html#method-i-get_action","(line)","<p>Returns the action that is specified in each line of the script.\n"],["get_current_results_dir","Results","Results.html#method-i-get_current_results_dir","()","<p>Returns the subdirectory where the results will be stored.\n"],["get_driver","Args","Args.html#method-i-get_driver","()","<p>Returns the WebDriver based on the browser option selected by the user.\n<p>Default Browser: Chrome @return …\n"],["get_failure_rate","Stats","Stats.html#method-i-get_failure_rate","()","<p>Iterate through each files in the stats directory and scan through them to find the failure rate. Failure …\n"],["get_files","Args","Args.html#method-i-get_files","()","<p>Returns the list of filenames in a directory / subdirectories\n<p>@return [String] files\n"],["get_params","Runner","Runner.html#method-i-get_params","(line)","<p>Returns the parameter that comes after each action line in the script.\n"],["get_results_directory","Args","Args.html#method-i-get_results_directory","()",""],["get_stats_directory","Args","Args.html#method-i-get_stats_directory","()",""],["get_test_stats","Runner","Runner.html#method-i-get_test_stats","(stats_dir)","<p>Generate stats from the Results file that is created by the framework.\n"],["get_var","Command","Command.html#method-i-get_var","(params)",""],["go_back","Page","Page.html#method-i-go_back","()","<p>Navigates back to the page driver was before.\n"],["go_to","Page","Page.html#method-i-go_to","(params)","<p>Navigates to a particular url that is stored in the yaml file.\n"],["home","Page","Page.html#method-i-home","()","<p>Returns the &#39;home&#39; link and navigates the website to the home page. @return [Selenium_Element] …\n"],["id_present?","Page","Page.html#method-i-id_present-3F","(item)","<p>Checks the validity of the id provided. @param [String] item\n"],["info","Results","Results.html#method-i-info","(message)","<p>Same as log method, but doesn&#39;t have a n at the front.\n"],["initialise_test_script","Command","Command.html#method-i-initialise_test_script","()","<p>Creates a time stamp for each test.\n"],["input","Command","Command.html#method-i-input","()","<p>Calls the appropriate function within the Input /class to enter details on a particular text field Each …\n"],["log","Results","Results.html#method-i-log","(message)","<p>Writes to the file and prints on the console. The log will be printed on a new line (unlike append method). …\n"],["log_action","Results","Results.html#method-i-log_action","(message)","<p>`log_action` performs the same function as `log` but adds a `:` at the end. @param [String] message\n"],["login","Command","Command.html#method-i-login","()","<p>Logs into the account using the login details provided by the yaml file.\n"],["login","Login","Login.html#method-i-login","(user, pass, button = 'btn-login')","<p>Logs in to the system.\n<p>Enter username and password to login form and submit the form. @param [String] …\n"],["logout","Command","Command.html#method-i-logout","()","<p>Logs out of the account and waits /until the login page is found.\n"],["logout","Login","Login.html#method-i-logout","()","<p>Logs out of the system by clicking on the menu button.\n<p>Selects the second menu caret where logout button …\n"],["menu","Command","Command.html#method-i-menu","()","<p>Finds the Menu button and clicks on Menu button. This function also calls the menu_item function to click …\n"],["menu","Page","Page.html#method-i-menu","()","<p>Returns the &#39;Menu&#39; button on the current page. @return [Selenium_Element] Menu\n"],["menu_input","Input","Input.html#method-i-menu_input","()","<p>Finds the item in a menu field and clicks on it, based on the id of the menuInput. Step 1: Find the element …\n"],["menu_item","Page","Page.html#method-i-menu_item","(item)","<p>Returns the particular menu item link on current page. @return [Selenium_Element] Menu_Item\n"],["mkdir","Results","Results.html#method-i-mkdir","()","<p>Creates a new directory within the results directory with a timestamp as name (if it already doesn&#39;t …\n"],["navbar_brand","Page","Page.html#method-i-navbar_brand","()","<p>Returns the navbar brand element. @return [Selenium_Element] navbar-brand\n"],["navbar_date","Page","Page.html#method-i-navbar_date","()","<p>Returns the navbar date element. @return [Selenium_Element] navbar-date\n"],["navbar_text","Page","Page.html#method-i-navbar_text","()","<p>Returns the navbar text element. @return [Selenium_Element] navbar-text\n"],["new","Button","Button.html#method-c-new","(driver, params)","<p>@param [Object] driver - The driver that will be used during the process. @param [Object] params - The …\n"],["new","Command","Command.html#method-c-new","(driver, results_dir, action, params)","<p>@param [String] action - action that is made on the driver @param [String] params - parameter that relates …\n"],["new","Home","Home.html#method-c-new","(driver)",""],["new","Input","Input.html#method-c-new","(driver, action, params)","<p>@param [Object] driver - The driver that will be used during the process. @param [Object] params - The …\n"],["new","Login","Login.html#method-c-new","(driver)",""],["new","Page","Page.html#method-c-new","(driver)","<p>@param [WebDriver] driver - The driver that will be used during the process.\n"],["new","Results","Results.html#method-c-new","(driver, result_dir, file_name)","<p>@param [WebDriver] driver - The driver that will be used during the process. @param [File] file_name …\n"],["new","Runner","Runner.html#method-c-new","(driver, args, time, files, results_dir, stats_dir, login, session, config)",""],["new","Search","Search.html#method-c-new","(driver, action, params)","<p>@param [Object] driver - The driver that will be used during the process. @param [Object] params - The …\n"],["new","Session","Session.html#method-c-new","(driver)","<p>@param [WebDriver] driver - the driver that will be used in a particular thread.\n"],["new","Stats","Stats.html#method-c-new","(stats_dir)","<p>@param [stats_dir] - The directory that is being analysed\n"],["new","Table","Table.html#method-c-new","(driver, params)","<p>@param [Object] driver - The driver that will be used during the process. @param [Object] params - The …\n"],["new","Text","Text.html#method-c-new","(driver, params)","<p>@param [Object] driver - The driver that will be used during the process. @param [Object] params - The …\n"],["new","Window","Window.html#method-c-new","(driver)","<p>@param [Object] driver - The driver that will be used during the process.\n"],["new_button","Button","Button.html#method-i-new_button","()","<p>Clicks on a general New button or a specific New button allocated to an object on the webpage.\n"],["new_user","Button","Button.html#method-i-new_user","()","<p>Clicks on the new user button. This function is required since the new user buttons have the &#39;user&#39; …\n"],["order","Button","Button.html#method-i-order","()","<p>Clicks on the order button present on the webpage. The order button has Bid or Ask options. Based on …\n"],["parse_command","Runner","Runner.html#method-i-parse_command","(action, params)","<p>Creates a Command object and execute the command based on the actions and parameters. @param [String] …\n"],["previous","Page","Page.html#method-i-previous","()","<p>Returns the &#39;previous&#39; link and navigates the website to the previous page. @return [Selenium_Element] …\n"],["print","Results","Results.html#method-i-print","(message)","<p>Only prints to the console. @param [String] message\n"],["record_failure_rates","Stats","Stats.html#method-i-record_failure_rates","(names, failure_counts, total_actions_counts)","<p>Records the list of failure rates for each test result files in a csv file\n"],["refresh_page","Command","Command.html#method-i-refresh_page","()","<p>Refreshes the current page.\n"],["reset","Session","Session.html#method-i-reset","()","<p>Resets the parameter to start a new session for a new test environment.\n"],["reset_form","Session","Session.html#method-i-reset_form","()","<p>Resets the form values stored as part of the test environment.\n"],["run_script","Runner","Runner.html#method-i-run_script","(filename)","<p>Reads each line in the test script and parse the command along with the parameters. @param [String] filename …\n"],["save_id","Page","Page.html#method-i-save_id","(action)","<p>Finds the id displayed for a particular object created in the system and saving the id to `temp_id` variable. …\n"],["screenshot","Results","Results.html#method-i-screenshot","(params)","<p>Takes the screenshot of the webpage at time of calling the function. @param [String] params - configuration …\n"],["scroll_to","Page","Page.html#method-i-scroll_to","(params)","<p>Scrolls the view to include the position of a specific element in the page (by id). The target element …\n"],["select2_input","Input","Input.html#method-i-select2_input","()","<p>Input value to field, find the appropriate result and click on a particular select2 field we are looking …\n"],["set_date","Session","Session.html#method-i-set_date","(params)","<p>sets the date that can be used in the text field. The function allows incrementation of date, and ignore …\n"],["set_report_file","Command","Command.html#method-i-set_report_file","()","<p>Sets a new Output file to write the test results to.\n"],["set_time","Session","Session.html#method-i-set_time","(params = Time.now.strftime('%H:%M'))","<p>sets the time that can be used in the text field.\n"],["set_var","Command","Command.html#method-i-set_var","(params)",""],["sleep_for","Session","Session.html#method-i-sleep_for","(count)","<p>Adds a regular wait to the test session of the size `count`. Note: Do not use the sleep function unless …\n"],["smart_split","Page","Page.html#method-i-smart_split","()",""],["subtract_business_days","Session","Session.html#method-i-subtract_business_days","(date, num)","<p>Subtracts a specific number of days to a date (ignoring weekends) and returns it\n"],["success","Results","Results.html#method-i-success","()","<p>Prints success to the end of the log.\n"],["switch_to","Window","Window.html#method-i-switch_to","(params)","<p>Switch between windows during a test. The number that is used to switch between windows are in the same …\n"],["table_wait","Session","Session.html#method-i-table_wait","()","<p>Waits /until the server responses with the table data once a page is loaded.\n"],["terminate","Session","Session.html#method-i-terminate","()","<p>Terminates the session by quitting the webdriver.\n"],["text_input","Input","Input.html#method-i-text_input","()","<p>Fills in the values to a text field with a particular ID. Step 1: Clears the text field before entering …\n"],["user_menu","Command","Command.html#method-i-user_menu","()","<p>Clicks on the user menu on the page. This function also clicks on the link within the user drop down …\n"],["user_menu","Page","Page.html#method-i-user_menu","()","<p>Returns the user menu button on current page. @return [Selenium_Element] User_Menu\n"],["user_menu_item","Page","Page.html#method-i-user_menu_item","(item)","<p>Returns the particular user menu item link on current page. @return [Selenium_Element] User_Menu_Item …\n"],["wait_for_stale","Session","Session.html#method-i-wait_for_stale","()","<p>Waits for the navbar to be displayed before further actions are made.\n"],["wait_until","Session","Session.html#method-i-wait_until","(condition)","<p>Waits /until the condition is true.\n"],["write","Results","Results.html#method-i-write","(message)","<p>Only writes to a file. @param [String] message\n"]]}}